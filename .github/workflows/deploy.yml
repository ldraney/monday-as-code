name: Monday as Code CI/CD

on:
  pull_request:
    branches: [main]
    paths:
      - 'resources/**'
      - 'configs/**'
      - 'scripts/**'
  
  push:
    branches: [main]
    paths:
      - 'resources/**'
      - 'configs/**'
      - 'scripts/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'lab'
        type: choice
        options:
        - lab
        - production
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Validate JSON files
        run: |
          echo "🔍 Validating JSON resource files..."
          find resources/ -name "*.json" -type f | while read -r file; do
            echo "Validating: $file"
            if ! jq empty "$file"; then
              echo "❌ Invalid JSON in: $file"
              exit 1
            fi
            echo "✅ Valid: $file"
          done

      - name: Validate environment configs
        run: |
          echo "🔧 Validating environment configurations..."
          for env_file in configs/*.env; do
            if [[ -f "$env_file" ]]; then
              echo "Checking: $env_file"
              source "$env_file"
              if [[ -z "$WORKSPACE_ID" ]]; then
                echo "❌ WORKSPACE_ID not set in $env_file"
                exit 1
              fi
              echo "✅ Valid: $env_file (Workspace: $WORKSPACE_ID)"
            fi
          done

      - name: Test API connection
        run: |
          echo "🔗 Testing Monday.com API connection..."
          TEST_QUERY='{"query": "{ me { id name email } }"}'
          RESPONSE=$(curl -s \
            -H "Authorization: $MONDAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$TEST_QUERY" \
            https://api.monday.com/v2)
          
          USER_NAME=$(echo "$RESPONSE" | jq -r '.data.me.name // "null"')
          if [[ "$USER_NAME" == "null" ]]; then
            echo "❌ API connection failed"
            echo "Response: $RESPONSE"
            exit 1
          fi
          echo "✅ Connected as: $USER_NAME"

  plan-lab:
    name: Plan - Lab Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Plan deployment to Lab
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh plan --env lab > plan_output.txt 2>&1
          
      - name: Comment PR with plan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan_output.txt', 'utf8');
            
            const comment = `## 📋 Monday as Code Deployment Plan
            
            **Environment:** Lab
            **Workspace ID:** From lab.env config
            
            \`\`\`
            ${planOutput}
            \`\`\`
            
            🔄 This plan will be automatically applied when merged to main.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-lab:
    name: Deploy - Lab Environment
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: lab
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Deploy to Lab
        run: |
          chmod +x scripts/deploy.sh
          echo "🚀 Deploying to Lab environment..."
          ./scripts/deploy.sh apply --env lab

      - name: Create deployment artifact
        run: |
          mkdir -p deployment-logs
          cp logs/*.log deployment-logs/ 2>/dev/null || true
          echo "Deployment completed at $(date)" > deployment-logs/deployment-summary.txt
          echo "Environment: lab" >> deployment-logs/deployment-summary.txt
          echo "Git SHA: ${{ github.sha }}" >> deployment-logs/deployment-summary.txt

      - name: Upload deployment logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-lab-${{ github.sha }}
          path: deployment-logs/
          retention-days: 30

  deploy-production:
    name: Deploy - Production Environment
    runs-on: ubuntu-latest
    needs: [validate, deploy-lab]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://monday.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Plan production deployment
        run: |
          chmod +x scripts/deploy.sh
          echo "📋 Planning production deployment..."
          ./scripts/deploy.sh plan --env production

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to Production environment..."
          ./scripts/deploy.sh apply --env production

      - name: Create deployment artifact
        run: |
          mkdir -p deployment-logs
          cp logs/*.log deployment-logs/ 2>/dev/null || true
          echo "Production deployment completed at $(date)" > deployment-logs/deployment-summary.txt
          echo "Environment: production" >> deployment-logs/deployment-summary.txt
          echo "Git SHA: ${{ github.sha }}" >> deployment-logs/deployment-summary.txt

      - name: Upload deployment logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-production-${{ github.sha }}
          path: deployment-logs/
          retention-days: 90

      - name: Notify success
        run: |
          echo "🎉 Production deployment successful!"
          echo "Changes are now live in the production Monday.com workspace"

  manual-deploy:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Execute manual action
        run: |
          chmod +x scripts/deploy.sh
          echo "🎯 Manual execution: ${{ github.event.inputs.action }} on ${{ github.event.inputs.environment }}"
          ./scripts/deploy.sh ${{ github.event.inputs.action }} --env ${{ github.event.inputs.environment }}

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: manual-deployment-${{ github.event.inputs.environment }}-${{ github.sha }}
          path: logs/
          retention-days: 30
